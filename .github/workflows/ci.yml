name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: Unit Tests
        run: go test -v ./...
        env:
          GO111MODULE: on

      - name: E2E Tests Linux
        if: runner.os == 'Linux'
        run: |
          export CONFIG_DIR=$(mktemp -d)
          echo -n ${CERTIFICATE} | base64 --decode > $CONFIG_DIR/certificate.pem
          echo -n ${CONFIG} | base64 --decode > $CONFIG_DIR/config.properties
          make test
        env:
          CONFIG: ${{ secrets.LINUX_CONFIG }}
          CERTIFICATE: ${{ secrets.CLIENT_CERTIFICATE }}

      - name: E2E Tests Windows
        shell: bash
        if: runner.os == 'Windows'
        run: |
          export CONFIG_DIR=$(mktemp -d)
          echo -n ${CERTIFICATE} | base64 --decode > $CONFIG_DIR/certificate.pem
          echo -n ${CONFIG} | base64 --decode > $CONFIG_DIR/config.properties
          make test
        env:
          CONFIG: ${{ secrets.WINDOWS_CONFIG }}
          CERTIFICATE: ${{ secrets.CLIENT_CERTIFICATE }}

  goreleaser:
    runs-on: ubuntu-20.04
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: Prepare THIRD_PARTY licenses
        run: |
          echo "machine github.com login myofbot password ${{ secrets.MYOFBOT_PAT }}" > $HOME/.netrc
          go install github.com/myopenfactory/huth/golicenses@latest
          golicenses .
        env:
          GOPRIVATE: github.com/myopenfactory/huth/*

      - name: Prepare sign certificate
        run: echo -n ${SIGN_CERTIFICATE} | base64 --decode > $HOME/key.asc
        env:
          SIGN_CERTIFICATE: ${{ secrets.SIGN_CERTIFICATE }}

      - name: Prepare Dockerhub
        run: docker login --username myofci --password ${DOCKERHUB_TOKEN}
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v1
        with:
          version: latest
          args: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
